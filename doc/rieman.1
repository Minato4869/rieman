.TH rieman 1 "2023-02-27" "GNU/Linux" "User's Manual"

.SH "NAME"
rieman \- The X11 desktop pager

.SH "SYNOPSIS"
.B rieman
[
.B \-h
]
[
.B \-v[v]
]
[
.B \-c
config
]
[
.B \-w
]
[
.B \-l logfile
]

.SH "DESCRIPTION"
.PP
.B rieman
is X11 desktop pager: a program that display each existing virtual
desktop with its windows and allows to switch between them.

.SS "FEATURES"
.IP \(bu 4
NetWM compliant
.IP \(bu 4
Large desktop/Viewports support
.IP \(bu 4
Ability to set desktops geometry (_NET_DESKTOP_GEOMETRY) to arrange
desktops in a configurable 2D grid
.IP \(bu 4
Displays name of desktops and windows in a configurable info area
.IP \(bu 4
Displays desktop number
.IP \(bu 4
Window selection/focusing when switching
.IP \(bu 4
Configurable look for different window states (active/inactive/requires attention)
.IP \(bu 4
Mini per-desktop tray for hidden windows
.IP \(bu 4
Supports display of application window icons
.IP \(bu 4
Pseudo-transparency support
.IP \(bu 4
Theme (aka skin) support. Any element may be customized.
.IP \(bu 4
Configuration reload
.IP \(bu 4
Simple tiling for desktop windows (1.1)
.IP \(bu 4
Control commands via configuration socket (1.2)
.IP \(bu 4
Per-output desktop subset display (1.3)


.SH "OPTIONS"
.TP
.B \-help
Displays short message with command-line options synopsis.
.TP
.B \-v
displays version

.TP
.B \-vv
displays version and build-time configuration

.TP
.B \-w
.B rieman
starts up in withdrawn mode so it can go into slit (aka dock). Exact
effect is defined by a running window manager.

.TP
.B \-c <config>
use alternate
.I config
file. This overrides configuration lookup scheme.

.TP
.B \-l <logfile>
use
.I logfile
instead of sdout/stderr

.SH "SIGNALS"
.PP

To reload configuration, send
.B SIGUSR1
to the rieman process. It will re-read all configuration files and apply
changes.

.SH "ENVIRONMENT VARIABLES"
.PP

The used X11 screen is taken from the
.B DISPLAY
environment variable.  To run rieman on the second screen run:
.TP
    $ DISPLAY=:0.1 rieman

.SH "FILES"

.PP
The main configuration files is named rieman.conf.
A skin is a directory containing image files and a
rieman_skin.conf configuration file. All paths inside
skin configuration file are relative to its directory.

Files are looked up until found in the following locations:

.TP
.I ./conf/rieman.conf
.TP
.I ./skins/<name>/rieman_skin.conf

current directory configuration (i.e. executing from the build directory)

.TP
.I
$XDG_CONFIG_HOME/rieman/rieman.conf
.TP
.I $XDG_DATA_HOME/rieman/skins/<name>/rieman_skin.conf

location as defined by freedesktop.org

.TP
.I ~/.config/rieman.conf
.TP
.I ~/.local/share/rieman/skins/<name>/rieman_skin.conf

home directory

.TP
.I /usr/local/share/rieman/rieman.conf
.TP
.I /usr/local/share/rieman/skins/<name>/rieman_skin.conf

system-wide, /usr/local/share/rieman is the default datadir

.SH "CONFIGURATION"

Configuration file format:

.IP \(bu 4
everything from '#' to end of line is a comment and ignored

.IP \(bu 4
each line contains key and value separated by whitespace

.IP \(bu 4
value is not escaped and quoting is not required. leading and trailing
spaces in the value are ignored. See conf/rieman.conf for example.

Configuration keys are:

.TP
.I geometry.width, geometry.height <0 | n>

Defines size of a single on-screen desktop cell in pixels. Zero height leads
to autocalculated setting based on screen aspect ratio.

.TP
.I layout.wrap <n>
   layout.corner <c>
   layout.orientation <horizontal | vertical>

The wrap parameter defines length of a row or column (depending on orientation).
The corner is one of "topleft", "topright", "bottomleft" or "bottomright" and
defines how desktops are arranged. See _NET_DESKTOP_LAYOUT for details.

.TP
.I subset.enabled <true | false>

.I subset.output <RANDR_output>

.I subset.start_desktop <n>

.I subset.ndesktops <n>

The "subsets" mode enables special mode, in which:

1) only a subset of virtual desktops is shown (start...start + ndesktops).

2) desktop geometry is determined by specified RandR output resolution.

This is useful in multi-monitor configuration, where each monitor has its
own set of virtual desktops, and desktop size is a summ of monitor sizes.
The mode allows to run multiple instance of rieman, each attached to
specific monitor and showing only desktops visible on the specific monitor.

The feature was tested with awesome WM. Note that root window property
_NET_CURRENT_DESKTOP allows to be set only once, so you cannot have active
desktop highlighted in all rieman instances (in awesome's terms, this is
currently selected tag, to which we have on access from outside).

.TP
.I appearance.skin <name>

Sets the skin name to use.

.TP
.I appearance.desktop_text <true | false>
   appearance.desktop_text.content <name|number>

If set, desktop number or name is displayed in the center of a desktop cell

.TP
.I appearance.desktop_pad <true | false>
   appearance.desktop_pad.position <above | below>

If set, little pad is drawn above or below desktop cell, which is used
to display desktop name (and for other purposes as well, like windows
names and icons for hidden windows)

.TP
.I appearance.window_icon <true | false>

If set, window icon is displayed additionally in a window rectangle

.TP
.I appearance.viewports  <true | false>

If set, viewports are displayed as a grid inside a desktop cell

.TP
.I appearance.minitray  <true | false>

If set, icons of a hidden windows are displayed in area, where desktop
name is shown; click on such an icon restores the window

.TP
.I window.withdrawn  <true | false>
    starts the pager in withdrawn state to put into dock/slit

.TP
.I window.dock  <true | false>
    sets window type to _NET_WM_WINDOW_TYPE_DOCK.
    Useful for WMs that expect it.

.TP
.I window.skip_taskbar  <true | false>

    If set, pager window is not shown in the taskbar

.TP
.I window.skip_pager  <true | false>

    If set, pager window is not shown in pagers

.TP
.I window.sticky  <true | false>

    If set, pager window appears on all desktops

.TP
.I window.position <topright | topleft | bottomright | bottomleft>
   window.dx <n>
   window.dy <n>

    Defines startup position on the screen. Note that in withdrawn mode
    window may be reparented and the setting will define position inside
    dock

    Optional dx and dy attributes control offset from x/y border at specified
    corner. By default, offsets are zero.

.TP
.I window.layer  <above | below | normal>

    Defines window layer

.TP
.I window.struts  <true | false>

.I window.struts.left <pixels>

.I window.struts.left_start_y <pixels>

.I window.struts.left_end_y <pixels>

.I window.struts.right right_start_y <pixels>

.I window.struts.right_end_y <pixels>

.I window.struts.top top_start_x <pixels>

.I window.struts.top_end_x <pixels>

.I window.struts.bottom <pixels>

.I window.struts.bottom_start_x <pixels>

.I window.struts.bottom_end <pixels>

   If enabled, defines values for_NET_WM_STRUT/_NET_WM_STRUT_PARTIAL which
   reserve place on screen borders for the window.

.TP
.I actions.change_desktop  <true | false>
   actions.change_desktop.mouse_button <left | right | middle>

    If set, mouse events are processed, allowing to switch desktops and focus
    windows. The mouse_button arguments selects the desired button.

.TP
.I actions.tile_windows <true | false>
   actions.tile_windows.mouse_button <left | right | middle>

    If set, mouse events are processed, allowing to tile windows on clicked
    desktop, using different tiling methods in a loop. Currently supported
    method is "fair" ported from the awesome WM, in horizontal and vertical modes.
    The mouse_button arguments selects the desired button.

.TP
.I control socket </path/to/socket>

   If set, rieman will listen for commands on UNIX DGRAM socket at specified
   path.  To send command, run the rieman executable with -m option and provide
   path to socket and comand, for example:

.I  $ rieman -m /path/to/ctl.sock exit

.SS "Recognized commands"

.IP \(bu 4
reload - reload configuration, see description above
.IP \(bu 4
exit - terminate the process
.IP \(bu 4
switch_desktop_left/right/up/down - switch desktop in 2D grid coordinates
.IP \(bu 4
switch_desktop_prev/next - switch to prev/next desktop by order
.IP \(bu 4
tile_current_desktop - tile windows on current desktop, one layout per command


.SH "SKIN CONFIGURATION"

The skin configuration defines following elements:
.IP \(bu 4
fonts - font specification for pager elements
.IP \(bu 4
backgrounds - textures specifications for pager elements
.IP \(bu 4
borders - borders specification for pager elements
.IP \(bu 4
icons - icons settings

.TP
The font attributes are:
.TP
.I fonts.<item>.face <freetype_def>
   fonts.<item>.size <n>
   fonts.<item>.color <[0x]base16-value>

.I face
is passed to fontconfig, check corresponding docs. Example "Droid Sans:10:Bold".
.I size
is the actual size in pixels that will be used to show it on screen.
.I color
is a hex number.

.TP
The backgrounds attributes are:
.TP
.I backgrounds.<item>.type <image | color>
   backgrounds.<item>.alpha <0..1>
   backgrounds.<item>.src <path | :root:>
   backgrounds.<item>.color <[0x]base16-value>

For
.I image,
src attribute must be specified with a path to PNG image, or a special value
.I ":root:"
which will use existing root background. If type is
.I color, use specified color


The
.I alpha
attribute defines transparency of a texture.

Following items are configurable in backgrounds: pager, desktop, desktop-pad,
desktop-active, viewport, viewport-active, window, window-active,
window-attention.

.TP
The borders attributes are:
.TP
.I borders.<item>.width <n>
   borders.<item>.type <image|color>
   borders.<item>.alpha <0..1>
   borders.<item> tiles <path> |
   borders.<item>.color <[0x]base16-value>

Defines border around some element. If
.I width
is zero, no border is applied. Border can be either
.I color
or
.I image.
Image border is a texture with tiles. Texture is 4x4 tiles, each
.I width
pixels square.
The
.I alpha
parameter is identical to those of
.I background

Following items are configurable in borders: pager,
desktop-active, viewport, viewport-active, window, window-active,
window-attention.

.TP
Stylable pager elemnts:

.TP
.I pager

Defines the most bottom element for the whole pager. Transparent skins will
use image and src=":root:" as background.

.TP
.I desktop, desktop-active

Desktop cell; -active is for currently selected desktop and a desktop under mouse.

.TP
.I desktop-pad

Area below or above the desktop cell reserverd for name/minitray

.TP
.I viewport, viewport-active

Viewport area inside desktop cell

.TP
.I window, window-active, window-attention

Windows in the pager. The 'active' is for focused windows and windows under mouse.
The 'attention' is for windows that have 'REQUIRE_ATTENTION' state property, for
example some messaging app with arrived message pending, or newly created
window.

.TP
.I icons.window.alpha <0..1>
   icons.window.fallback <path>

Defines alpha level for window icons and image to use for windows that have
no icons

.SH CHANGES

In version 1.2 all XML configuration was replaced with "conf" simple plaintext
format, both for configuration and skins.
Old files (configuration and skins) can be converted to new format using
script/migrate_to_conf.sh script (xsltproc utility is required)

Version 1.1 of skins removed /colors section with list of colordef's that
could be referenced from skin. Instead, color is specified directly,
using "color" attribute with hexadecimal value.

.SH "AUTHORS"

The rieman was written by Vladimir Khomutov.

.SH "SEE ALSO"
.BR xprop (1),
.BR xwininfo (1),
.TP
.BR https://specifications.freedesktop.org/wm-spec/wm-spec-latest.html
.TP
.BR https://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html
.TP
.BR https://www.freedesktop.org/software/fontconfig/fontconfig-user
